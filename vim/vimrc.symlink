" URL: http://vim.wikia.com/wiki/Example_vimrc {{{1
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode
" Description: A minimal, but feature rich, example .vimrc. If you are a
"              newbie, using this file as your .vimrc is a good choice. If
"              you're a more advanced user, building your own .vimrc based on
"              this file is still a good idea.

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enables some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

filetype off " required! for Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle required!
" the magic that makes this work
Bundle 'gmarik/Vundle.vim'

" https://github.com/digitaltoad/vim-jade
Bundle 'digitaltoad/vim-jade'

"airline buffer extension uses bufferline
"Bundle 'bling/vim-bufferline'

" https://github.com/bling/vim-airline
Bundle 'bling/vim-airline'
"airline fast buffer switching
"let g:airline#extensions#tabline#enabled = 1
"powerline font symbols
let g:airline_powerline_fonts = 1

" https://github.com/tpope/vim-surround
Bundle 'tpope/vim-surround'

" https://github.com/tpope/vim-fugitive
" :Gstatus :Glog :Gcommit
Bundle 'tpope/vim-fugitive'

" https://github.com/kien/ctrlp.vim
" ctrl-p (ctrl-j ctrl-k to navigate quickfix)
Bundle 'kien/ctrlp.vim'
" ctags search ctags -R -f ./.git/tags .
nnoremap <leader>. :CtrlPTag<cr>

" https://github.com/mileszs/ack.vim
" :Ack AckAdd
" from quickfix results:
" o    to open (same as enter)
" go   to preview file (open but maintain focus on ack.vim results)
" t    to open in new tab
" T    to open in new tab silently
" h    to open in horizontal split
" H    to open in horizontal split silently
" v    to open in vertical split
" gv   to open in vertical split silently
" q    to close the quickfix window
Bundle 'mileszs/ack.vim'

" https://github.com/scrooloose/nerdcommenter
" <leader>cc and <leader>cu
Bundle 'scrooloose/nerdcommenter'

" https://github.com/pangloss/vim-javascript
" js indenting. also does syntax, but this config uses jshint from syntastic
Bundle 'pangloss/vim-javascript'

" https://github.com/scrooloose/syntastic
" use :Errors to see the error list
" check the syntax_checkers dir in the plugins folder to see what executables
" you need. `npm install -g jshint` for example
Bundle 'scrooloose/syntastic'
" Set your compiler executable with e.g. (defaults to gcc)
let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -pedantic -Wall'
" custom include directories that should be added to the gcc command line
let g:syntastic_cpp_include_dirs = [ 'includes', 'headers', 'ext/gtest/include' ]
let g:syntastic_json_checkers=['jsonlint']
" Better :sign interface symbols
let g:syntastic_error_symbol = 'âœ—'
let g:syntastic_warning_symbol = '!'

" https://github.com/scrooloose/nerdtree
" double \ doesn't execute the command at the moment. this is a problem in
" this rc file. seems to be fighting with easymotion
Bundle 'scrooloose/nerdtree'
" Set up command for NERDTree
map <leader>\ :NERDTreeToggle<CR>
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"https://github.com/Lokaltog/vim-easymotion
" default: <Leader><Leader>
"let g:EasyMotion_leader_key = '<Leader>'
" search word = <Leader><Leader>t
"Bundle 'Lokaltog/vim-easymotion'

" https://github.com/mattn/emmet-vim/
" zen coding
" ctrl-y,
"Bundle 'mattn/emmet-vim'
" just for CSS/HTML FTs
"let g:user_emmet_install_global = 0
"autocmd FileType html,css EmmetInstall

" https://github.com/drmingdrmer/xptemplate
"Bundle "drmingdrmer/xptemplate"
"let g:xptemplate_vars = "SParg="
"let g:xptemplate_key = '<Tab>'

" https://github.com/ervandew/supertab
"Bundle 'ervandew/supertab'

"""""""""
" SuperTab and XPT Together
"
" avoid key conflict
"let g:SuperTabMappingForward = '<Plug>supertabKey'
" if nothing matched in xpt, try supertab
"let g:xptemplate_fallback = '<Plug>supertabKey'
" xpt uses <Tab> as trigger key
"let g:xptemplate_key = '<Tab>'
" use <tab>/<S-tab> to navigate through pum. Optional
" let g:xptemplate_pum_tab_nav = 1
" xpt triggers only when you typed whole name of a snippet. Optional
"let g:xptemplate_minimal_prefix = 'full'

" CSS stuff
Bundle 'groenewege/vim-less'
Bundle 'skammer/vim-css-color'
Bundle 'hail2u/vim-css3-syntax'

" http://www.vim.org/scripts/script.php?script_id=273
"Bundle 'vim-scripts/taglist.vim'

" https://github.com/msanders/snipmate.vim
" replaced with xpt due to stupid deps
"Bundle 'msanders/snipmate.vim'

" non github repos
" using ctrl-p now for linux too
"Bundle 'git://git.wincent.com/command-t.git'

" Coffee
Bundle 'kchmck/vim-coffee-script'

""""""""""""""""""""""""""""
" Color Bundles
" Bundle 'adlawson/vim-sorcerer' bad bolding
Bundle 'jpo/vim-railscasts-theme'
Bundle 'vim-scripts/SlateDark'
Bundle 'vim-scripts/Liquid-Carbon'
Bundle 'altercation/vim-colors-solarized'


call vundle#end()
" Attempt to determine the type of a file based on its name and possibly its
" contents.  Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on
au BufRead,BufNewFile *.json set filetype=json

" Enable syntax highlighting
syntax on

"------------------------------------------------------------
" Must have options {{{1
"
" These are options that any sane Vim setup should have

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files.  Vim will complain if you try to quit without
" saving.
set hidden

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on.  Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line
set nostartofline

" Better command-line completion
set wildmenu
set wildmode=list:full

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities.  As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" changes Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
"set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=2
set softtabstop=2
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2


"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" grep for word under cursor in c/cpp/h-files
"map <F9> <Esc>:vim <cword> ./**/*.c* ./**/*.h<CR>
"map <F9> <Esc>:!couchapp push<CR> <CR>
"map <D-/> NERDComToggle

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>


"------------------------------------------------------------
" my basics {{{1
"
" don't litter
set backup
set backupdir=~/.vim/tmp/
set writebackup
set directory=~/.vim/tmp/

" MacVim Fullscreen Settings
if has("gui_running")
  set fuoptions=maxvert,maxhorz
  "au GUIEnter * set fullscreen
endif

" display settings
set background=dark
set t_Co=256
try
    colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme morning
endtry
"set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
set cursorline
set scrolloff=3   " Keep the next three lines viewable

"folding settings
set foldmethod=marker   "fold based on marker
set nofoldenable        "dont fold by default

" lots of command histor
set history=1000

"Apply highlighting automatically whenever text exceeds 80 columns
":au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

if &diff
  "I'm only interested in diff colours
  syntax off
endif

command! W :w

set clipboard=autoselect,unnamed

" my mappings {{{1
"
" Set leader to comma
"let mapleader = ","

" markers should not require pinky dislocation
"nnoremap ' `
"nnoremap ` '

" fast window cycle
"map <leader>\ :wincmd w<CR>

" Make editing .vimrc easier
map <leader>v :sp ~/.vimrc<CR>
map <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Generate a tags file in the current directory using Exuberant ctags
" map <leader>e :silent :! ctags -R<CR>:exe ":echo 'tags generated'"<CR>
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
"set tags+=~/.vim/tags/gl
"set tags+=~/.vim/tags/sdl
"set tags+=~/.vim/tags/qt4
" build tags of your own project with Ctrl-F12
map <S-F11> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"OmniCppComplete http://vim.wikia.com/wiki/C%2B%2B_code_completion
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

map <leader>s :silent !screen -X split<CR>:silent !screen -X focus down<CR>:silent !screen -X screen ~/.vim/screener.sh<CR>:redraw!<CR>

" buffer navs
noremap <F1> :tabp<CR>
inoremap <F1> <Esc>:tabp<CR>
"inoremap <F1>:let &insertmode=0<CR>:tabp<CR>
noremap <F2> :tabn<CR>
inoremap <F2> <Esc>:tabn<CR>



" To insert timestamp, press F3.
nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

" F4 searches current word recursively
map <F4> :execute "vimgrep /" . expand("<cword>") . "/j app/** config/**" <Bar> cw<CR>

" F5 cleans all trailing whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Use <F6> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F7>

map <F12> :!./go <CR>
"" map notes to ctrl-f
"map <f12> :sp ~/.notes.txt<cr>

"<home> toggles between start of line and start of text
imap <khome> <home>
nmap <khome> <home>
inoremap <silent> <home> <C-O>:call Home()<CR>
nnoremap <silent> <home> :call Home()<CR>
function! Home()
  let curcol = wincol()
  normal ^
  let newcol = wincol()
  if newcol == curcol
    normal 0
  endif
endfunction

" Specky Plugin options {{{1
"let g:speckyBannerKey = "<C-S>b"
"let g:speckyQuoteSwitcherKey = "<C-S>'"
"let g:speckyRunRdocKey = "<C-S>r"
"let g:speckySpecSwitcherKey = "<C-S>x"
"let g:speckyRunSpecKey = "<C-S>s"
"let g:speckyBannerKey = "<C-E>b"
"let g:speckySpecSwitcherKey = "<C-E>e"
"let g:speckyRunSpecKey = "<C-E>r"
"let g:speckyRunRdocKey = "<C-E>d"
"let g:speckyWindowType = 1

" FuzzyFinder options {{{1
"let g:fuzzy_ignore = "*.log;vendor/**;coverage/**"
"let g:fuzzy_matching_limit = 40


"" Set up commands for FuzzyFinder and FuzzyFinderTextMate
"map <leader>t :FuzzyFinderTextMate<CR>
"map <leader>f :FuzzyFinderFile **/ <CR>
"map <leader>b :FuzzyFinderBuffer<CR>
""map <leader>f :FuzzyFinderFile<CR>
"map <leader>r :FuzzyFinderMruFile<CR>

call togglebg#map("<F6>")
"" scrooloose's statusline + scrooloose's ruby syntax checker {{{1
"set statusline=%f       "tail of the filename

""display a warning if fileformat isnt unix
"set statusline+=%#warningmsg#
"set statusline+=%{&ff!='unix'?'['.&ff.']':''}
"set statusline+=%*

""display a warning if file encoding isnt utf-8
"set statusline+=%#warningmsg#
"set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
"set statusline+=%*

"set statusline+=%h      "help file flag
"set statusline+=%y      "filetype
"set statusline+=%r      "read only flag
"set statusline+=%m      "modified flag

"""display a warning if &et is wrong, or we have mixed-indenting
"set statusline+=%#error#
"set statusline+=%{StatuslineTabWarning()}
"set statusline+=%*

"set statusline+=%{StatuslineTrailingSpaceWarning()}

""display a warning if &paste is set
"set statusline+=%#error#
"set statusline+=%{&paste?'[paste]':''}
"set statusline+=%*

"set statusline+=%=      "left/right separator
""set statusline+=%{StatuslineCurrentHighlight()}\ \ "current highlight
"set statusline+=%c,     "cursor column
"set statusline+=%l/%L   "cursor line/total lines
"set statusline+=\ %P    "percent through file
"set laststatus=2

""recalculate the trailing whitespace warning when idle, and after saving
"autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

""return '[\s]' if trailing white space is detected
""return '' otherwise
"function! StatuslineTrailingSpaceWarning()
    "if !exists("b:statusline_trailing_space_warning")
        "if search('\s\+$', 'nw') != 0
            "let b:statusline_trailing_space_warning = '[\s]'
        "else
            "let b:statusline_trailing_space_warning = ''
        "endif
    "endif
    "return b:statusline_trailing_space_warning
"endfunction


""return the syntax highlight group under the cursor ''
"function! StatuslineCurrentHighlight()
    "let name = synIDattr(synID(line('.'),col('.'),1),'name')
    "if name == ''
        "return ''
    "else
        "return '[' . name . ']'
    "endif
"endfunction

""recalculate the tab warning flag when idle and after writing
"autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

""return '[&et]' if &et is set wrong
""return '[mixed-indenting]' if spaces and tabs are used to indent
""return an empty string if everything is fine
"function! StatuslineTabWarning()
    "if !exists("b:statusline_tab_warning")
        "let tabs = search('^\t', 'nw') != 0
        "let spaces = search('^ ', 'nw') != 0

        "if tabs && spaces
            "let b:statusline_tab_warning =  '[mixed-indenting]'
        "elseif (spaces && !&et) || (tabs && &et)
            "let b:statusline_tab_warning = '[&et]'
        "else
            "let b:statusline_tab_warning = ''
        "endif
    "endif
    "return b:statusline_tab_warning
"endfunction

